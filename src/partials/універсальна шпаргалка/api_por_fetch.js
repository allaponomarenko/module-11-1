// ===== 0) –£—Ç–∏–ª—ñ—Ç–∏ DOM =====
const $ = sel => document.querySelector(sel);
const $$ = sel => document.querySelectorAll(sel);

const refs = sel => ({
  form: $(sel.form),
  output: $(sel.output),
  status: $(sel.status),
});

function bindFormSubmit(formEl, handler) {
  if (!formEl) return;
  formEl.addEventListener('submit', e => {
    e.preventDefault();
    const value = e.target.elements.query?.value?.trim();
    if (!value) return;
    handler(value, e).finally(() => e.target.reset());
  });
}

function setStatus(el, msg) {
  if (el) el.textContent = msg || '';
}
function showLoading(el) {
  setStatus(el, '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶');
}
function showError(el, err) {
  setStatus(el, `–ü–æ–º–∏–ª–∫–∞: ${err?.message || err}`);
}

function render(el, html) {
  if (el) el.innerHTML = html;
}
function append(el, html) {
  if (el) el.insertAdjacentHTML('beforeend', html);
}

function escapeHTML(str = '') {
  return String(str)
    .replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;')
    .replaceAll('"', '&quot;')
    .replaceAll("'", '&#39;');
}

// ===== 1) –ö–µ—à —ñ –≤—ñ–¥–º—ñ–Ω–∞ –∑–∞–ø–∏—Ç—ñ–≤ =====
const cache = new Map();
let lastController = null;
function abortLast() {
  if (lastController) lastController.abort();
  lastController = new AbortController();
  return lastController.signal;
}

// ===== 2) –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç fetch =====
function buildQuery(params = {}) {
  const usp = new URLSearchParams();
  Object.entries(params).forEach(([k, v]) => {
    if (v !== undefined && v !== null && v !== '') usp.set(k, v);
  });
  const q = usp.toString();
  return q ? `?${q}` : '';
}

function withTimeout(ms = 10000) {
  const ctrl = new AbortController();
  const id = setTimeout(() => ctrl.abort(), ms);
  return { signal: ctrl.signal, cancel: () => clearTimeout(id) };
}

async function handleResponse(res) {
  const contentType = res.headers.get('content-type') || '';
  const isJSON = contentType.includes('application/json');
  const data = isJSON ? await res.json() : await res.text();
  if (!res.ok) {
    const msg = isJSON ? data.message || JSON.stringify(data) : data;
    const err = new Error(msg || `HTTP ${res.status}`);
    err.status = res.status;
    err.payload = data;
    throw err;
  }
  return data;
}

function createApiClient({
  baseURL = '',
  defaultHeaders = {},
  timeout = 10000,
  beforeRequest,
} = {}) {
  return {
    async request(
      path,
      { method = 'GET', params, body, headers = {}, signal } = {},
    ) {
      const url = baseURL + path + buildQuery(params);
      const { signal: tSignal, cancel } = withTimeout(timeout);
      const mergedSignal = signal || tSignal;

      const init = {
        method,
        headers: { Accept: 'application/json', ...defaultHeaders, ...headers },
      };
      if (body !== undefined) {
        init.headers['Content-Type'] = 'application/json';
        init.body = JSON.stringify(body);
      }
      if (typeof beforeRequest === 'function') beforeRequest({ url, init });
      try {
        const res = await fetch(url, { ...init, signal: mergedSignal });
        return await handleResponse(res);
      } finally {
        cancel();
      }
    },
    get(path, opts) {
      return this.request(path, { ...opts, method: 'GET' });
    },
    post(path, body, opts) {
      return this.request(path, { ...opts, method: 'POST', body });
    },
  };
}

// ===== 3) API –∫–ª—ñ—î–Ω—Ç–∏ =====
// ‚ö†Ô∏è –ù–ï –∑–±–µ—Ä—ñ–≥–∞–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π RapidAPI –∫–ª—é—á —É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—ñ!
const binance = createApiClient({
  baseURL: 'https://binance43.p.rapidapi.com',
  defaultHeaders: {
    'X-RapidAPI-Key': 'YOUR_KEY_HERE',
    'X-RapidAPI-Host': 'binance43.p.rapidapi.com',
  },
});

const superhero = createApiClient({
  baseURL: 'https://superhero-search.p.rapidapi.com/api/',
  defaultHeaders: {
    'X-RapidAPI-Key': 'YOUR_KEY_HERE',
    'X-RapidAPI-Host': 'superhero-search.p.rapidapi.com',
  },
});

const poke = createApiClient({ baseURL: 'https://pokeapi.co/api/v2' });

// ===== 4) –§—É–Ω–∫—Ü—ñ—ó –¥–∞–Ω–∏—Ö =====
async function getPrice(symbol) {
  const key = `binance:${symbol}`;
  if (cache.has(key)) return cache.get(key);
  const data = await binance.get('/ticker/price', { params: { symbol } });
  cache.set(key, data);
  return data;
}

async function searchHero(name) {
  const key = `hero:${name.toLowerCase()}`;
  if (cache.has(key)) return cache.get(key);
  const data = await superhero.get('', { params: { hero: name } });
  cache.set(key, data);
  return data;
}

async function getPokemon(nameOrId) {
  const key = `pokemon:${String(nameOrId).toLowerCase()}`;
  if (cache.has(key)) return cache.get(key);
  const data = await poke.get(`/pokemon/${String(nameOrId).toLowerCase()}`);
  cache.set(key, data);
  return data;
}

// ===== 5) –®–∞–±–ª–æ–Ω–∏ =====
function symbolTemplate({ price, symbol }) {
  return `<div class="price-row"><span>${escapeHTML(
    symbol,
  )}</span><span>${escapeHTML(String(price))}</span></div>`;
}

function heroTemplate(hero) {
  return `<div class="card hero-card">
    <div class="image-container">
      <img src="${escapeHTML(hero.images?.lg || '')}" alt="${escapeHTML(
    hero.name || '',
  )}" class="hero-image" />
    </div>
    <div class="hero-body">
      <h4 class="hero-name">${escapeHTML(hero.name || '')}</h4>
      <p class="hero-bio">${escapeHTML(
        hero.biography?.fullName || '',
      )} ‚Äî ${escapeHTML(hero.biography?.placeOfBirth || '')}, ${escapeHTML(
    hero.work?.base || '',
  )}</p>
    </div>
  </div>`;
}

function pokemonTemplate({
  height,
  weight,
  id,
  name,
  base_experience,
  sprites: { front_default, back_default } = {},
}) {
  return `<div class="card pokemon-card">
    <h3 class="pokemon-name">${escapeHTML(name)} ‚Äî Pokemon Details</h3>
    <div class="image-container">
      <img data-back="${escapeHTML(
        back_default || '',
      )}" data-front="${escapeHTML(
    front_default || '',
  )}" class="pokemon-image js-pocimage" src="${escapeHTML(
    front_default || '',
  )}" alt="${escapeHTML(name)}" />
    </div>
    <ul class="info-list">
      <li><b>ID:</b> ${escapeHTML(String(id))}</li>
      <li><b>Height:</b> ${escapeHTML(String(height))} decimetres</li>
      <li><b>Weight:</b> ${escapeHTML(String(weight))} grams</li>
      <li><b>Base Experience:</b> ${escapeHTML(String(base_experience))}</li>
    </ul>
  </div>`;
}

// ===== 6) –û–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∞–±–º—ñ—Ç—ñ–≤ =====
async function handleBinanceSubmit(value) {
  const { output, status } = refs({
    form: '.js-search-form[data-id="2"]',
    output: '.js-binance-info',
    status: '.js-status',
  });
  showLoading(status);
  try {
    const signal = abortLast();
    const data = await getPrice(value, { signal });
    render(output, symbolTemplate(data));
    output.classList.remove('empty');
    setStatus(status, '');
  } catch (err) {
    showError(status, err);
  }
}

async function handleHeroSubmit(value) {
  const { output, status } = refs({
    form: '.js-search-form[data-id="1"]',
    output: '.js-hero-container',
    status: '.js-status',
  });
  showLoading(status);
  try {
    const signal = abortLast();
    const data = await searchHero(value, { signal });
    append(output, heroTemplate(data));
    setStatus(status, '');
  } catch (err) {
    showError(status, err);
  }
}

async function handlePokemonSubmit(value) {
  const { output, status } = refs({
    form: '.js-search-form[data-id="5"]',
    output: '.js-pokemon-list',
    status: '.js-status',
  });
  showLoading(status);
  try {
    const signal = abortLast();
    const data = await getPokemon(value, { signal });
    append(output, pokemonTemplate(data));
    setStatus(status, '');
  } catch (err) {
    showError(status, err);
  }
}

// ===== 7) –ü—Ä–∏–≤'—è–∑–∫–∞ —Ñ–æ—Ä–º =====
bindFormSubmit($('.js-search-form[data-id="2"]'), handleBinanceSubmit);
bindFormSubmit($('.js-search-form[data-id="1"]'), handleHeroSubmit);
bindFormSubmit($('.js-search-form[data-id="5"]'), handlePokemonSubmit);

// ===== 8) –ì–ª–æ–±–∞–ª—å–Ω–∏–π catcher –Ω–∞ —á–∞—Å —Ä–æ–∑—Ä–æ–±–∫–∏ =====
window.addEventListener('unhandledrejection', e =>
  console.warn('Unhandled:', e.reason),
);
//===================================================================================================================
/*
//TODO:üß≠ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –°–•–ï–ú–ê —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º (—à–ø–∞—Ä–≥–∞–ª–∫–∞ –Ω–∞ –º–∞–π–±—É—Ç–Ω—î)

//*–ù–∏–∂—á–µ ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π —à–∞–±–ª–æ–Ω-–∞–ª–≥–æ—Ä–∏—Ç–º, —è–∫–∏–π –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ø—ñ–¥ –±—É–¥—å-—è–∫–∏–π REST/HTTP API. 
//*–¶–µ –Ω–µ ¬´–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ñ–∞–π–ª–∏¬ª, –∞ —Å—Ö–µ–º–∞ —Ä—ñ—à–µ–Ω—å + –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ (–ø—Å–µ–≤–¥–æ–∫–æ–¥), 
// *—è–∫—ñ —Ç–∏ —à–≤–∏–¥–∫–æ –ø—ñ–¥—Å—Ç–∞–≤–∏—à –ø—ñ–¥ –±—É–¥—å-—è–∫–∏–π –±–µ–∫–µ–Ω–¥.

//! 0) –ú–µ–Ω—Ç–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å (flow) ===============================================================

//? 1. –ü–æ–¥—ñ—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Üí (–Ω–∞—Ç–∏—Å–Ω—É–≤, –≤–≤—ñ–≤, –ø—Ä–æ–∫—Ä—É—Ç–∏–≤, –≤—ñ–¥–∫—Ä–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É)

//? 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞/–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–≤–æ–¥—É ‚Üí (—Ç—Ä–∏–º, –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É, –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–≥—ñ—Å—Ç—Ä—É)

//? 3. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Ç—É ‚Üí URL, params, headers, body, signal(AbortController), timeout

//? 4. –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ loading

//? 5. –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç ‚Üí fetch|axios (–∑ —Ä–µ—Ç—Ä–∞—è–º–∏ –¥–ª—è 429/5xx)

//? 6. –û–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Üí ok? ‚Üí parse(JSON|text|blob) ‚Üí –º–∞–ø—ñ–Ω–≥ –¥–æ –º–æ–¥–µ–ª—ñ UI

//? 7. –û–Ω–æ–≤–∏—Ç–∏ UI ‚Üí success –∞–±–æ empty –∞–±–æ error

//? 8. –ö–µ—à / –º–µ–º–æ—ñ–∑–∞—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

// –î—É–º–∞–π —è–∫ –ø—Ä–æ —Å—Ç–∞–Ω–∏: idle ‚Üí loading ‚Üí success|empty|error.

//! 1) –†—ñ—à–µ–Ω–Ω—è-–ø–µ—Ä–µ–º–∏–∫–∞—á—ñ (–∫–æ–ª–∏ —â–æ –≤–º–∏–∫–∞—Ç–∏) ===============================

//AbortController ‚Äî —è–∫—â–æ –ø–æ–ª–µ –≤–≤–æ–¥—É ¬´–∂–∏–≤–µ¬ª (debounce) –∞–±–æ –º–æ–∂–ª–∏–≤—ñ —à–≤–∏–¥–∫—ñ –ø–æ–≤—Ç–æ—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∏.

//Debounce ‚Äî –¥–ª—è live-–ø–æ—à—É–∫—É/–∞–≤—Ç–æ–∫–æ–º–ø–ª—ñ—Ç—É.

//Retry + backoff ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –∑–±–æ—ó–≤ (429, 5xx).

//–ö–µ—à ‚Äî —è–∫—â–æ –æ–¥–Ω–∞–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç —ñ–º–æ–≤—ñ—Ä–Ω–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ, –∞–±–æ –º–µ—Ä–µ–∂–∞ –¥–æ—Ä–æ–≥–∞.

//–ü–∞–≥—ñ–Ω–∞—Ü—ñ—è ‚Äî –∫–æ–ª–∏ —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ–≤–≥–∏–π –∞–±–æ —Å–µ—Ä–≤–µ—Ä –≤—ñ–¥–¥–∞—î next/prev –∫—É—Ä—Å–æ—Ä–∏.

//–ü—Ä–æ–∫—Å—ñ/—Å–µ—Ä–≤–µ—Ä ‚Äî –∫–æ–ª–∏ —î —Å–µ–∫—Ä–µ—Ç–∏ (API keys), –∞–±–æ CORS.

//! 2) –ë–∞–∑–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç (–ø—Å–µ–≤–¥–æ–∫–æ–¥) ===============================

client = createClient({ baseURL, defaultHeaders, timeout })

request(path, { method='GET', params, body, signal }) {
  url = baseURL + path + qs(params)
  with timeoutSignal
  res = fetch(url, { method, headers, body, signal })
  data = parse(res)
  if !res.ok -> throw {status, message, data}
  return data
}

//! 3) –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ UI (–ø—Å–µ–≤–¥–æ–∫–æ–¥) ===============================

state = 'idle' | 'loading' | 'success' | 'empty' | 'error'

async function run(query) {
  set(state, 'loading')
  try {
    data = await api.get(query)
    set(state, data.isEmpty ? 'empty' : 'success')
    render(data)
  } catch (e) {
    set(state, 'error')
    showError(e)
  }
}

//! 4) –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó ===============================

onSubmit(e) {
  e.preventDefault()
  q = normalize(e.target.query.value)
  if (!valid(q)) return showHint('–ü–µ—Ä–µ–≤—ñ—Ä –∑–Ω–∞—á–µ–Ω–Ω—è')
  abortPrevious()
  run(q)
}

//! 5) –ü–∞—Ç–µ—Ä–Ω–∏ –∑–∞–ø–∏—Ç—ñ–≤ ===============================

GET //(–ø–æ—à—É–∫/–¥–µ—Ç–∞–ª—ñ)

api.get('/resource', { params: { q, page, limit } })

POST/PUT/PATCH //(–∑–º—ñ–Ω–∏)

api.post('/resource', payload) // body: JSON; –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É

res = await fetch(url)
blob = await res.blob()
URL.createObjectURL(blob)

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä (multipart)

fd = new FormData()
fd.append('file', file)
fetch(url, { method: 'POST', body: fd })

//! 6) –ü–æ–º–∏–ª–∫–∏: –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –¥—ñ—ó ===============================

// 400/404: –ø—ñ–¥—Å–≤—ñ—Ç–∏—Ç–∏ –ø–æ–ª–µ, –¥–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é (¬´–ø–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç/—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä¬ª).

// 401/403: –ø–æ–∫–∞–∑–∞—Ç–∏ ¬´–ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è¬ª; –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–Ω/–æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω.

// 429: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ¬´–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ¬ª, retry with backoff, –∫–µ—à/–¥–µ–±–∞—É–Ω—Å.

// 5xx: ¬´—Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞¬ª + –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—É.

// AbortError: —ñ–≥–Ω–æ—Ä ‚Äî —Ü–µ –∫–µ—Ä–æ–≤–∞–Ω–∞ –≤—ñ–¥–º—ñ–Ω–∞.

//*–ü—Å–µ–≤–¥–æ–∫–æ–¥ —Ä–µ—Ç—Ä–∞—é:

retry(fn, attempts=2) {
  for i in 0..attempts {
    try { return await fn() }
    catch (e) {
      if (![429,500,502,503,504].includes(e.status)) throw e
      await sleep(300 * 2**i)
    }
  }
  throw e
}

//! 7) –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è (offset/limit vs cursor) ===============================

// offset/limit
page=1; do {
  data = await api.get('/items', { params:{ page, limit } })
  render(data.items)
  page++
} while (data.items.length === limit)

// cursor/next
cursor=null; do {
  data = await api.get('/items', { params:{ cursor } })
  render(data.items)
  cursor = data.nextCursor
} while (cursor)

//! 8) –ö–µ—à—É–≤–∞–Ω–Ω—è (–∫–ª—é—á = –º–µ—Ç–æ–¥ + url + params) ===============================

key = hash(method, path, params)
if (cache.has(key)) return cache.get(key)
res = await api.get(path, { params })
cache.set(key, res)

// –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –¥–æ–¥–∞–≤–∞–π TTL: –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —á–∞—Å —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ ¬´–ø—Ä–æ—Ç—É—Ö–∞–Ω–Ω—è¬ª.

//! 9) –î–µ–±–∞—É–Ω—Å/–¢–∞–π–º‚Äë–∞—É—Ç/–í—ñ–¥–º—ñ–Ω–∞ ===============================
/*
debounce(fn, wait) => (...args) => { clearTimeout(t); t=setTimeout(()=>fn(...args),wait) }
withTimeout(ms) => AbortController + setTimeout(abort, ms)
abortPrevious() => –∑–±–µ—Ä—ñ–≥–∞–π lastController —ñ abort()
*/
//! 10) –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ –ø—Ä–æ–¥–∞–∫—à–Ω‚Äë–≥—ñ–≥—ñ—î–Ω–∞ ===============================
/**
 * –°–µ–∫—Ä–µ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (proxy), —Ñ—Ä–æ–Ω—Ç –æ—Ç—Ä–∏–º—É—î –ª–∏—à–µ —Å–µ—Å—ñ—é/—Ç–æ–∫–µ–Ω –±–µ–∑–ø–µ–∫–∏.
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ, —ñ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ.
 * –õ–æ–≥–∏ –ø–æ–º–∏–ª–æ–∫ (–∫–æ–Ω—Å–æ–ª—å –ø—ñ–¥ —á–∞—Å dev, –æ–∫—Ä–µ–º–∏–π –∑–±–∏—Ä–∞—á —É –ø—Ä–æ–¥—ñ).
 * –ü–æ—Ä–æ–∂–Ω—ñ —Å—Ç–∞–Ω–∏ –π –ª–æ–∞–¥–µ—Ä–∏ ‚Äî –∑–∞–≤–∂–¥–∏.
 * –ê–∫—Å–µ—Å–∏–±—ñ–ª—ñ—Ç—ñ: aria-live –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤, —Ñ–æ–∫—É—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
 */

//! 11) ¬´–ú–∞—Ç—Ä–∏—á–∫–∞¬ª —à–≤–∏–¥–∫–∏—Ö —Ä—ñ—à–µ–Ω—å ===============================

//? –ó–∞–¥–∞—á–∞: Live‚Äë–ø–æ—à—É–∫                          –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: debounce + AbortController

//? –ó–∞–¥–∞—á–∞: –í–µ–ª–∏–∫—ñ —Å–ø–∏—Å–∫–∏                       –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è (cursor –±–∞–∂–∞–Ω–æ)

//? –ó–∞–¥–∞—á–∞: –°–ø–ª–µ—Å–∫–∏ —Ç—Ä–∞—Ñ—ñ–∫—É                     –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –∫–µ—à + –¥–µ–±–∞—É–Ω—Å + 429 retry

//? –ó–∞–¥–∞—á–∞: –ü–æ–≤—ñ–ª—å–Ω–∏–π –±–µ–∫–µ–Ω–¥                    –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Å–ø—ñ–Ω–µ—Ä + ¬´—Å–∫–µ–ª–µ—Ç–æ–Ω–∏¬ª, –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç

//? –ó–∞–¥–∞—á–∞: –ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ API                   –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –±–µ–∫–µ–Ω–¥‚Äë–ø—Ä–æ–∫—Å—ñ, –Ω–µ —Å–≤—ñ—Ç–∏—Ç–∏ –∫–ª—é—á

//? –ó–∞–¥–∞—á–∞: –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞                  –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: —Ä–µ—Ç—Ä–∞—ó + –æ—Ñ–ª–∞–π–Ω‚Äë—ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä

//! 12) –ú—ñ–Ω—ñ-—à–∞–±–ª–æ–Ω –ø—ñ–¥ –±—É–¥—å-—è–∫–∏–π –≤–∏–∫–ª–∏–∫ (drop‚Äëin) ===============================
/*
async function call({ path, params, onData, onEmpty, onError }) {
  setStatus(statusEl, '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶')
  try {
    abortPrevious()
    const data = await client.get(path, { params })
    if (!data || isEmpty(data)) { onEmpty?.(); setStatus(statusEl, '–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ') }
    else { onData?.(data); setStatus(statusEl, '') }
  } catch (e) {
    if (e.name === 'AbortError') return
    onError?.(e)
    setStatus(statusEl, `–ü–æ–º–∏–ª–∫–∞: ${e.message || '–Ω–µ–≤—ñ–¥–æ–º–∞'}`)
  }
}
*/
//–ó–±–µ—Ä—ñ–≥–∞–π —Ü—é ¬´—Å—Ö–µ–º—É‚Äë—à–∞–±–ª–æ–Ω¬ª —è–∫ –æ—Ä—ñ—î–Ω—Ç–∏—Ä: —Å–ø–µ—Ä—à—É –≤–∏–∑–Ω–∞—á–∞—î—à —Å—Ç–∞–Ω/–ø–æ–¥—ñ—é, –ø–æ—Ç—ñ–º –∑–±–∏—Ä–∞—î—à –∑–∞–ø–∏—Ç,
//  –¥–∞–ª—ñ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å —è–∫–æ—Å—Ç—ñ (abort/retry/cache), –Ω–∞ —Ñ—ñ–Ω—ñ—à—ñ ‚Äî —Ä–µ–Ω–¥–µ—Ä —Å—Ç–∞–Ω—É.
